// This #include statement was automatically added by the Particle IDE.
#include <neopixel.h>
#include "Particle.h"

// This #include statement was automatically added by the Particle IDE.
#include <MPU6050.h>
#include <I2Cdev.h>

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#if (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE) && !defined (PARTICLE)
    #include "Wire.h"
#endif

MPU6050 accelgyro;

int16_t ax, ay, az;
int16_t gx, gy, gz;
int temt6000Pin = A0;
float lux;
int i;

// uncomment "OUTPUT_READABLE_ACCELGYRO" if you want to see a tab-separated
// list of the accel X/Y/Z and then gyro X/Y/Z values in decimal. Easy to read,
// not so easy to parse, and slow(er) over UART.
#define OUTPUT_READABLE_ACCELGYRO

#define light_CHECK_INTERVAL 10000
unsigned long lastlightCheck = 0;

#if defined (PARTICLE)
#define LED_PIN D7 // (Particle is D7)
#else
#define LED_PIN 13 // (Arduino is 13, Teensy is 11, Teensy++ is 6)
#endif

void rainbow(uint8_t wait);



#define PIXEL_PIN D3
#define PIXEL_COUNT 12
#define PIXEL_TYPE WS2812B
#define BRIGHTNESS 80

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void rainbow(uint8_t wait);
uint32_t Wheel(byte WheelPos);

void setup() {
    

    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    // initialize serial communication
    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
    // it's really up to you depending on your project)
    
    Serial.begin(38400);

    // initialize device
    Serial.println("Initializing I2C devices...");
    accelgyro.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
    
    strip.setBrightness(BRIGHTNESS);
    strip.begin();
    strip.show(); // Initialize all pixels to 'off'
     Particle.syncTime();
     Time.zone(+2);

}

void loop() {
    
        if (Time.hour() > 21){
    System.sleep(SLEEP_MODE_DEEP, 32400);
}
    
    
    // read raw accel/gyro measurements from device
    
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    float light = analogRead(temt6000Pin) * 0.9765625;  // 1000/1024
 
    #ifdef OUTPUT_READABLE_ACCELGYRO
        // display tab-separated accel/gyro x/y/z values
        Serial.print("\tAccel X:");
        Serial.print(ax); 
        Serial.print("\tAccel Y:");
        Serial.print(ay); 
        Serial.print("\tAccel Z:");
        Serial.print(az); 
        Serial.print("\tLight:");Serial.println(light);
        delay(100);
    #endif
        
    int i;
    i = (int) light;  
        
      if (lastlightCheck + light_CHECK_INTERVAL < millis()) {
   lastlightCheck = millis();
       String Straz = String(az);
       String Strlight = String(i);
       
  Particle.publish("light", Strlight, PRIVATE);
  Particle.publish("az", Straz, PRIVATE);
       }

if (light < 500.00) {
    
    for(int i=0; i<12; i++) {
        strip.setPixelColor(i, 255,255,255);
     strip.show();
    delay(40);}
    {strip.clear();}
  
 }


if (light > 500.01 && light < 4000) {
    
    for(int i=0; i<12; i++) {
        strip.setPixelColor(i, 0,0,0);
     strip.show();
     delay(10);
      }
  } 
}  
   
  

 



